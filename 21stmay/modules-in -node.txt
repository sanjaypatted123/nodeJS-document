
## Modules in Node.js

### What is a Module?

A **module** is a reusable block of code in a separate file that can be **imported** into other files. Node.js uses the **CommonJS module system** by default.

Each module in Node has its own **execution context**, avoiding variable collisions.

---

### Types of Modules

1. **Core Modules**

   * Built into Node.js
   * No need to install
   * Examples: `fs`, `http`, `path`, `crypto`

   ```js
   const fs = require('fs');
   fs.writeFileSync('hello.txt', 'Hello, Node!');
   ```

2. **Local Modules (Custom)**

   * Created by the developer
   * Use `module.exports` to expose variables/functions
   * Use `require()` to import them

   ```js
   // math.js
   function add(a, b) {
     return a + b;
   }
   module.exports = { add };
   ```

   ```js
   // app.js
   const math = require('./math');
   console.log(math.add(2, 3)); // Output: 5
   ```

3. **Third-Party Modules**

   * Installed via npm
   * Located in `node_modules/`
   * Declared in `package.json`

   ```bash
   npm install express
   ```

   ```js
   const express = require('express');
   const app = express();
   ```
---------------------------------

http module::

const http = require('http');

const server = http.createServer((req, res) => {
    console.log(req);
    process.exit();
});

server.listen(8100);


here in this code we get a large o/p in terminal

 Deep Explanation of Key Properties in terminal
1. req.method
The HTTP method used (GET, POST, etc.).

Example: 'GET'

2. req.url
The path requested by the client.

Example: '/', '/api', '/style.css'

3. req.headers
Object containing request headers sent by the client.

Example:

js
Copy code
{
  host: 'localhost:8100',
  user-agent: 'Mozilla/5.0...',
  accept: '*/*',
  ...
}
4. req.socket
The underlying TCP connection object (low-level).

Contains the IP address, port, and other transport-related data.

5. req.httpVersion
The HTTP version used (usually "1.1" or "2.0")



Simple example for http server creation:

const http=require('http');
const server=http.createServer((
)=>{
    console.log('method:',req.method);
    console.log('url:',req.url);
    console.log('headers:',req.headers);
    res.write('hello from server');
    res.end();
});
server.listen(8100,()=>{
    console.log('server running at http://localhost:8100');
});

Absolutely! Let's explain CORS in a very simple and beginner-friendly way — like you're learning it for the first time.

🧠 First, What is CORS?
CORS stands for Cross-Origin Resource Sharing.
It’s a security feature in browsers that controls whether your website is allowed to access data from another website (called another origin).

🧠 What is "Origin"?
An origin = protocol + domain + port
For example:
URL	Origin
https://google.com	https://google.com
http://google.com	Different (because of http)
https://api.google.com	Different (subdomain)
https://google.com:3000	Different (port)
😡 The Problem
When you build a frontend (HTML/JavaScript) and try to get data from another origin (example: an API), the browser says:
❌ “Nope! I won’t let JavaScript on this site access data from another site unless that other site says it's okay.”
Why?To protect users from websites stealing your private data.

✅ The Solution: CORS
CORS is a way for the server (the one giving data) to say:
✅ "It’s okay to let that website access my data."
It does this by sending special HTTP headers with the response.

🔧 Example in Real Life:
You (Frontend)
fetch('https://othersite.com/data')
  .then(res => res.json())
  .then(data => console.log(data));
Server (othersite.com)
If the server responds with this HTTP header:
Access-Control-Allow-Origin: *
✅ Your browser will allow it.
If the header is missing or wrong:
❌ Browser blocks it, and you see a CORS error in the console.

🍔 Simple Analogy: Restaurant & Delivery
* You are a customer (JavaScript app) ordering from a restaurant (API server)
* Normally, restaurants only serve their own in-house guests (same origin)
* But CORS is like the restaurant saying:“Yes, we accept orders from that customer’s house (another origin)!”
They say this by putting a note on the bag (CORS headers) that says:
Allow-Origin: https://myhouse.com

💻 How to Enable CORS on Your Server?
✅ In Plain Node.js:
res.setHeader('Access-Control-Allow-Origin', '*');
That tells the browser:
"I allow any site to access me."

✅ In Express.js (easier way):
Install the cors package:
npm install cors
Use it in your server:
const cors = require('cors');
app.use(cors());
That automatically sets the correct headers so browsers allow cross-origin requests.

🔁 What About POST Requests?
For POST, PUT, or DELETE, browsers often send a special request first called a preflight request (OPTIONS method) to check:
* Am I allowed to make this request?
* Are these headers/methods okay?
So your server must respond to OPTIONS requests too — either manually or automatically (Express + CORS handles it for you).

📝 Summary
Term	Meaning
Origin	Protocol + Domain + Port
CORS	System that uses headers to allow one origin to access another
Why needed?	Browsers block cross-origin access for security
Solution?	Server sends Access-Control-Allow-Origin header to allow access
Best tool	Use cors middleware in Express to handle it easily
Want to see a small frontend + backend CORS demo with fetch() and Express?



http headers :
	request headers
		host
		accept
		accept-language
		referer

	response headers
		access-control-allow-origin(for cors)
		content-type
		content-encoding

	Representation headers
			•	Content-Length
        * Content-Range
        * Content-Type
        * Content-Encoding
        * Content-Location
        * Content-Language

	Payload header:
		The payload headers include: Content-Length, Content-Range, Trailer, and Transfer-Encoding.






	
