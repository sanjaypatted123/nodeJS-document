

## 📘 1. REST API Methods (CRUD Operations)

REST (Representational State Transfer) is an architecture style used to build web services. REST APIs use HTTP methods to perform CRUD operations:

### 🟢 1.1 GET — Retrieve Data

* **Purpose:** Used to fetch data from the server.
* **Use case:** Getting a list of users, a single product, etc.
* **Safe:** Does not change data on the server.
* **Example Endpoint:**

  ```
  GET /users
  GET /users/5  → fetch user with ID 5
  ```

**Server Response:**

```json
{
  "id": 5,
  "name": "Alice",
  "email": "alice@example.com"
}
```

### 🟡 1.2 POST — Create New Data

* **Purpose:** Send data to the server to create a new resource.
* **Use case:** Register a new user, create a product, upload a file.
* **Not idempotent:** Every POST creates a new resource.
* **Example Endpoint:**

  ```
  POST /users
  ```

**Request Body:**

```json
{
  "name": "Alice",
  "email": "alice@example.com"
}
```

**Server Response:**

```json
{
  "message": "User created successfully",
  "userId": 5
}
```

### 🔵 1.3 PUT — Replace Entire Resource

* **Purpose:** Replace an existing resource completely.
* **Use case:** Updating the entire user profile.
* **Idempotent:** Sending the same request multiple times has the same result.
* **Example Endpoint:**

  ```
  PUT /users/5
  ```

**Request Body:**

```json
{
  "name": "Alice Updated",
  "email": "alice.updated@example.com"
}
```

### 🟠 1.4 PATCH — Partially Update Resource

* **Purpose:** Partially update an existing resource.
* **Use case:** Update only the email of a user.
* **Idempotent:** Like PUT.
* **Example Endpoint:**

  ```
  PATCH /users/5
  ```

**Request Body:**

```json
{
  "email": "newemail@example.com"
}
```

### 🔴 1.5 DELETE — Remove Resource

* **Purpose:** Delete a resource from the server.
* **Use case:** Deleting a user, file, or post.
* **Example Endpoint:**

  ```
  DELETE /users/5
  ```

**Server Response:**

```json
{
  "message": "User deleted successfully"
}
```

---

## 🧪 2. How to Work with REST APIs in Postman

### 🔧 What is Postman?

Postman is a powerful GUI tool to test REST APIs without writing any frontend code. It helps simulate requests like GET, POST, PUT, DELETE and view responses easily.

### 🔰 Basic Setup:

1. Open Postman and click “+” to create a new tab.
2. Enter your endpoint URL (`http://localhost:3000/users`)
3. Choose the HTTP method (GET/POST/etc)
4. Add headers or body if needed
5. Click **Send** and view the response in the bottom panel

---

### 🟢 2.1 Sending a GET Request

**Goal:** Fetch data

* Select: `GET`
* URL: `http://localhost:3000/users`
* No body needed.
* Optional Header:

  ```
  Content-Type: application/json
  ```

📌 **Use Case:** Viewing all users.

---

### 🟡 2.2 Sending a POST Request

**Goal:** Send data to create a new resource

* Select: `POST`
* URL: `http://localhost:3000/users`
* Headers:

  ```
  Content-Type: application/json
  ```
* Body:

  * Go to **Body** > **raw** > select **JSON** from dropdown
  * Add:

    ```json
    {
      "name": "John",
      "email": "john@example.com"
    }
    ```

---

### 🔵 2.3 Sending a PUT Request

**Goal:** Replace resource

* Select: `PUT`
* URL: `http://localhost:3000/users/1`
* Body:

  ```json
  {
    "name": "New Name",
    "email": "newemail@example.com"
  }
  ```

---

### 🟠 2.4 Sending a PATCH Request

**Goal:** Update part of the resource

* Select: `PATCH`
* URL: `http://localhost:3000/users/1`
* Body:

  ```json
  {
    "email": "patch@example.com"
  }
  ```

---

### 🔴 2.5 Sending a DELETE Request

**Goal:** Delete resource

* Select: `DELETE`
* URL: `http://localhost:3000/users/1`

---

## 📂 3. File Upload and Update via REST API

### 🧾 3.1 Uploading a File with `POST` in Postman

1. **Method:** `POST`
2. **URL:** `http://localhost:3000/upload`
3. **Go to Body > form-data**
4. Add a key named `file`, set its type to **File**
5. Upload a file from your system
6. Click **Send**

💡 In your Node.js/Express backend:

```js
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

app.post('/upload', upload.single('file'), (req, res) => {
  res.send({ message: 'File uploaded', file: req.file });
});
```

---

### ✏️ 3.2 Updating a File with `PUT`

Used when replacing an old file with a new one.

1. **Method:** `PUT`
2. **URL:** `http://localhost:3000/files/1`
3. Use **form-data**

   * Key: `file`
   * Type: File
   * Value: select new file
4. Click **Send**

🛠️ Server-side route:

```js
app.put('/files/:id', upload.single('file'), (req, res) => {
  const fileId = req.params.id;
  // Logic to replace existing file
  res.send({ message: `File ${fileId} updated.` });
});
```

---

## 🧠 Best Practices for Using REST and Postman

| Best Practice                                                         | Why It Matters                                   |
| --------------------------------------------------------------------- | ------------------------------------------------ |
| Use proper status codes (`200`, `201`, `400`, `404`, `500`)           | Helps identify issues fast                       |
| Avoid sensitive data in URLs (use headers/body)                       | Prevents security risks                          |
| Use pagination for large lists                                        | Prevents performance issues                      |
| Always send `Content-Type: application/json` in headers for JSON APIs | Ensures the server interprets the data correctly |
| Validate input on both client and server                              | Prevents malicious/invalid data                  |

---
