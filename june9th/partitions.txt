
---

## üìÇ **Partitions in PostgreSQL ‚Äî Full Explanation**

### üß† **What is Partitioning?**

Partitioning is a **database design technique** where **large tables** are split into **smaller pieces (called partitions)** to improve:

* **Performance**
* **Query efficiency**
* **Maintainability**

Each partition is treated like a **sub-table**, but users interact with the **main table (called a *partitioned table*)**.

---

## üîß Types of Partitioning in PostgreSQL

PostgreSQL supports **three types** of partitioning:

| Type                      | Description                                                             | Example Use Case                    |
| ------------------------- | ----------------------------------------------------------------------- | ----------------------------------- |
| 1. **Range Partitioning** | Rows are placed into partitions based on a range of values in a column. | Data by date: Jan, Feb, Mar         |
| 2. **List Partitioning**  | Rows are placed based on specific values (discrete values).             | Country-wise data: `IN`, `US`, `UK` |
| 3. **Hash Partitioning**  | Rows are assigned to partitions using a hash function.                  | Random distribution: for even load  |

---

## üìò Example 1: Range Partitioning

```sql
CREATE TABLE sales (
  id SERIAL,
  sale_date DATE,
  amount NUMERIC
) PARTITION BY RANGE (sale_date);

CREATE TABLE sales_2023_01 PARTITION OF sales
  FOR VALUES FROM ('2023-01-01') TO ('2023-02-01');

CREATE TABLE sales_2023_02 PARTITION OF sales
  FOR VALUES FROM ('2023-02-01') TO ('2023-03-01');
```

‚úÖ Queries like this will only scan the required partition:

```sql
SELECT * FROM sales WHERE sale_date = '2023-01-15';
```

---

## üìò Example 2: List Partitioning

```sql
CREATE TABLE customers (
  id SERIAL,
  name TEXT,
  country TEXT
) PARTITION BY LIST (country);

CREATE TABLE customers_india PARTITION OF customers
  FOR VALUES IN ('IN');

CREATE TABLE customers_usa PARTITION OF customers
  FOR VALUES IN ('US');
```

---

## üìò Example 3: Hash Partitioning

```sql
CREATE TABLE logs (
  id SERIAL,
  user_id INT
) PARTITION BY HASH (user_id);

CREATE TABLE logs_part1 PARTITION OF logs FOR VALUES WITH (MODULUS 4, REMAINDER 0);
CREATE TABLE logs_part2 PARTITION OF logs FOR VALUES WITH (MODULUS 4, REMAINDER 1);
CREATE TABLE logs_part3 PARTITION OF logs FOR VALUES WITH (MODULUS 4, REMAINDER 2);
CREATE TABLE logs_part4 PARTITION OF logs FOR VALUES WITH (MODULUS 4, REMAINDER 3);
```

---

## üß™ Why Use Partitioning?

| Benefit                   | Explanation                                               |
| ------------------------- | --------------------------------------------------------- |
| üîé Faster queries         | Only relevant partitions are scanned (partition pruning). |
| üöõ Easier data management | You can drop old partitions instead of deleting rows.     |
| üìä Better maintenance     | Each partition can have its own indexes and vacuuming.    |

---

## ‚ùó Important Notes

1. **Partitioned tables don‚Äôt store data themselves**, only the partitions do.
2. **Constraints like primary key** must be declared on each partition individually.
3. **Indexes** must also be created separately on each partition unless you use **`pg_partman`** or tools to manage it.

---

## üõ† Managing Partitions

### üßπ Drop a Partition

```sql
DROP TABLE sales_2023_01;
```

### üöö Detach a Partition

```sql
ALTER TABLE sales DETACH PARTITION sales_2023_01;
```

### ‚ûï Add New Partition

```sql
CREATE TABLE sales_2023_03 PARTITION OF sales
  FOR VALUES FROM ('2023-03-01') TO ('2023-04-01');
```

---

## üîÑ When NOT to Use Partitioning

| Warning                    | Explanation                                       |
| -------------------------- | ------------------------------------------------- |
| Small tables               | Partitioning adds overhead for small data.        |
| Complex joins              | Partitioned tables can complicate query planning. |
| Lack of good partition key | Poor key choice may make partitioning useless.    |

---

