### CTE in PostgreSQL (Common Table Expressions) ‚Äì Complete Guide

---

### üî∑ What is a CTE?

A **CTE (Common Table Expression)** in PostgreSQL is a **temporary result set** that you can reference within a `SELECT`, `INSERT`, `UPDATE`, or `DELETE` statement.

You define a CTE using the `WITH` keyword.

---

### üî∑ Syntax of a CTE:

```sql
WITH cte_name AS (
    SQL_query
)
SELECT * FROM cte_name;
```

---

### ‚úÖ **Why use CTEs?**

| Benefit                    | Description                                          |
| -------------------------- | ---------------------------------------------------- |
| ‚úÖ **Improves readability** | Breaks complex queries into parts                    |
| ‚úÖ **Avoids repeated code** | You can reuse the same logic (like subqueries)       |
| ‚úÖ **Recursive queries**    | Allows traversing hierarchical structures like trees |
| ‚úÖ **Can be chained**       | Multiple CTEs can be written together                |

---

### üîπ Example 1: Simple CTE

```sql
WITH top_products AS (
    SELECT product_id, name, price
    FROM products
    WHERE price > 1000
)
SELECT * FROM top_products;
```

This example creates a temporary table `top_products` and then queries it.

---

### üîπ Example 2: CTE with JOIN

```sql
WITH recent_orders AS (
    SELECT * FROM orders WHERE order_date > CURRENT_DATE - INTERVAL '30 days'
)
SELECT o.order_id, c.customer_name
FROM recent_orders o
JOIN customers c ON o.customer_id = c.customer_id;
```

---

### üîπ Example 3: Multiple CTEs

```sql
WITH high_salary AS (
    SELECT id, name, salary FROM employees WHERE salary > 50000
),
low_salary AS (
    SELECT id, name, salary FROM employees WHERE salary <= 50000
)
SELECT * FROM high_salary
UNION ALL
SELECT * FROM low_salary;
```

---

### üîÅ Recursive CTE

Recursive CTEs allow a query to call itself. Useful for tree structures, hierarchies, or paths.

---

### üîπ Example 4: Recursive CTE ‚Äì Tree Traversal

Suppose we have an `employees` table:

| id | name  | manager\_id |
| -- | ----- | ----------- |
| 1  | CEO   | NULL        |
| 2  | John  | 1           |
| 3  | Alice | 2           |
| 4  | Bob   | 2           |

```sql
WITH RECURSIVE employee_hierarchy AS (
    -- Anchor member (starts from the top-level manager)
    SELECT id, name, manager_id, 1 AS level
    FROM employees
    WHERE manager_id IS NULL

    UNION ALL

    -- Recursive member
    SELECT e.id, e.name, e.manager_id, eh.level + 1
    FROM employees e
    INNER JOIN employee_hierarchy eh ON e.manager_id = eh.id
)
SELECT * FROM employee_hierarchy;
```

---

### üîπ Example 5: Recursive Numbers Generator

Generate a sequence of numbers from 1 to 10:

```sql
WITH RECURSIVE numbers AS (
    SELECT 1 AS n
    UNION ALL
    SELECT n + 1 FROM numbers WHERE n < 10
)
SELECT * FROM numbers;
```

---

### üîí CTEs in `UPDATE`, `INSERT`, `DELETE`

#### Example 6: CTE in UPDATE

```sql
WITH updated AS (
    SELECT id FROM employees WHERE salary < 30000
)
UPDATE employees
SET salary = salary + 5000
WHERE id IN (SELECT id FROM updated);
```

---

### ‚ùó Important Points

* CTEs are evaluated **once**, even if used multiple times in the outer query.
* They are **not persistent**, they only live for the duration of the main query.
* CTEs can be **nested** or **chained**.

---

### ‚úÖ When to Use

* To simplify complex joins or aggregations
* When needing recursion
* To improve readability and reuse logic
* In updates or deletes that require pre-filtering

---

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî


practice problems:
---

## üî∞ Level 1 ‚Äì Basic CTE

---

### ‚úÖ 1. Filter High-Value Orders

**üß© Task**: Find `order_id` and `total_amount` from `orders` where total > 10000.

```sql
WITH high_value_orders AS (
    SELECT order_id, total_amount
    FROM orders
    WHERE total_amount > 10000
)
SELECT * FROM high_value_orders;
```

**‚úÖ Explanation**:

* `WITH` creates a CTE named `high_value_orders`.
* It selects all orders with total over 10,000.
* Final `SELECT` fetches from that CTE.

---

### ‚úÖ 2. Combine Products by Category and Price

**üß© Task**:

* CTE1 ‚Üí Products with price > 1000
* CTE2 ‚Üí Products in category 'Electronics'
* Return **UNION** of both

```sql
WITH expensive_products AS (
    SELECT * FROM products WHERE price > 1000
),
electronics_products AS (
    SELECT * FROM products WHERE category = 'Electronics'
)
SELECT * FROM expensive_products
UNION
SELECT * FROM electronics_products;
```

**‚úÖ Explanation**:

* Two CTEs are defined.
* `UNION` removes duplicates automatically (use `UNION ALL` if duplicates are okay).
* Final result merges both sets.

---

## ‚ö° Level 2 ‚Äì CTE with JOIN and Aggregation

---

### ‚úÖ 3. Recent Customers with Orders

**üß© Task**: Orders from last 7 days + customer names

```sql
WITH recent_orders AS (
    SELECT * FROM orders
    WHERE order_date > CURRENT_DATE - INTERVAL '7 days'
)
SELECT ro.order_id, c.customer_id, c.name, ro.order_date
FROM recent_orders ro
JOIN customers c ON ro.customer_id = c.customer_id;
```

**‚úÖ Explanation**:

* CTE filters orders from last 7 days.
* Outer query joins with `customers` to get names.

---

### ‚úÖ 4. Department Salary Summary

**üß© Task**: Avg salary > 50000 per department

```sql
WITH dept_avg_salary AS (
    SELECT department, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department
)
SELECT * FROM dept_avg_salary
WHERE avg_salary > 50000;
```

**‚úÖ Explanation**:

* `AVG()` used inside CTE.
* Outer query filters based on `avg_salary`.

---

## üîÅ Level 3 ‚Äì Recursive CTEs

---

### ‚úÖ 5. Build an Employee Hierarchy

**üß© Task**: Show `employee ‚Üí manager ‚Üí level`

```sql
WITH RECURSIVE employee_tree AS (
    -- Anchor: top-level managers
    SELECT id, name, manager_id, 1 AS level
    FROM employees
    WHERE manager_id IS NULL

    UNION ALL

    -- Recursive: employees under those managers
    SELECT e.id, e.name, e.manager_id, et.level + 1
    FROM employees e
    JOIN employee_tree et ON e.manager_id = et.id
)
SELECT * FROM employee_tree;
```

**‚úÖ Explanation**:

* Anchor selects root employees.
* Recursive part keeps adding employees under them.
* `level` helps track depth in hierarchy.

---

### ‚úÖ 6. Generate a Number Series (1 to 50)

```sql
WITH RECURSIVE numbers AS (
    SELECT 1 AS n
    UNION ALL
    SELECT n + 1 FROM numbers WHERE n < 50
)
SELECT * FROM numbers;
```

**‚úÖ Explanation**:

* Starts at 1, adds 1 recursively.
* Stops when `n < 50`.

---

### ‚úÖ 7. Factorial Using Recursive CTE (5!)

```sql
WITH RECURSIVE factorial(n, fact) AS (
    SELECT 1, 1  -- Base: 1! = 1
    UNION ALL
    SELECT n + 1, (n + 1) * fact
    FROM factorial
    WHERE n < 5
)
SELECT * FROM factorial;
```

‚û°Ô∏è You‚Äôll get:

| n | fact |
| - | ---- |
| 1 | 1    |
| 2 | 2    |
| 3 | 6    |
| 4 | 24   |
| 5 | 120  |

To get only final value:

```sql
SELECT fact FROM factorial WHERE n = 5;
```

---

## üß† Summary

| Level    | Concepts Used                      |
| -------- | ---------------------------------- |
| Basic    | Simple filtering with `WITH`       |
| Mid      | Joins, aggregation inside CTE      |
| Advanced | Recursive CTEs, hierarchical logic |

---

