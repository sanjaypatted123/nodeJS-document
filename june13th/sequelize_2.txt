What Are Associations in Sequelize?
In databases, associations define how tables are related to each other. 
In Sequelize, we define associations between models to represent 
relationships like:

| Relationship Type | Example                         |
| ----------------- | ------------------------------- |
| One-to-One        | A user has one profile          |
| One-to-Many       | A user has many posts           |
| Many-to-Many      | Students belong to many courses |


one to one :
What Is One-to-One?
 One record in Table A is linked to exactly one record in Table B.

Example:
A User has one Profile
A Profile  belongs to one User

primary table:
| Line                              | Explanation                         |
| --------------------------------- | ----------------------------------- |
| `sequelize.define('User', {...})` | Creates a model named **User**      |
| `name: DataTypes.STRING`          | Adds a column `name` of type string |
| `User.hasOne(models.Profile)`     | Says **one User has one Profile**   |
| `associate = models => {}`        | A function that sets relationships  |

foreign table:
| Line                                 | Explanation                        |
| ------------------------------------ | ---------------------------------- |
| `sequelize.define('Profile', {...})` | Creates a model named **Profile**  |
| `bio: DataTypes.STRING`              | Adds a column `bio` of type string |
| `Profile.belongsTo(models.User)`     | Says **Profile belongs to a User** |


setProfile(profile) → Adds the userId to the Profile table.

include: Profile → Joins and fetches the related Profile with the User.

Final output will show user + bio together.

What Is One-to-Many?
One User can have many Posts

Each Post belongs to one User

Step-by-Step Example


User model

Post model

Their relationship: User.hasMany(Post) and Post.belongsTo(User)

| Line                         | Explanation                        |
| ---------------------------- | ---------------------------------- |
| `Sequelize` and `DataTypes`  | Main classes to define models      |
| `'demo', 'postgres', '1971'` | Database name, username, password  |
| `dialect: 'postgres'`        | We’re using PostgreSQL as database |


user table:
| Line                     | Explanation                                   |
| ------------------------ | --------------------------------------------- |
| `User`                   | A Sequelize model representing the User table |
| `name: DataTypes.STRING` | One column: name (string)                     |


post table:
| Line      | Explanation                     |
| --------- | ------------------------------- |
| `Post`    | A model representing blog posts |
| `title`   | Short title of the post         |
| `content` | Full content (TEXT datatype)    |



| Line                   | Explanation                               |
| ---------------------- | ----------------------------------------- |
| `User.hasMany(Post)`   | Adds foreign key `userId` to `Post` table |
| `Post.belongsTo(User)` | Defines relationship from Post’s side     |


| Line                               | Meaning                              |
| ---------------------------------- | ------------------------------------ |
| `sequelize.sync({ force: true })`  | Recreates tables fresh               |
| `User.create(...)`                 | Creates a user                       |
| `Post.create(...)`                 | Creates a post                       |
| `user.addPost(post)`               | Adds post with userId foreign key    |
| `User.findOne({ include: Post })`  | Fetches user with all posts (JOIN)   |
| `console.log(JSON.stringify(...))` | Pretty prints the user + their posts |


What Is Many-to-Many?
In a Many-to-Many relationship:

One Student can join many Courses

One Course can have many Students

To connect both, Sequelize automatically creates a junction table (also called join table),
 such as StudentCourses.

 | Concept         | Code                                           |
| --------------- | ---------------------------------------------- |
| Many-to-Many    | `ModelA.belongsToMany(ModelB, { through })`    |
| Join table      | Created automatically (e.g., `StudentCourses`) |
| Assign items    | `student.addCourse(course)`                    |
| Fetch with join | `include: Course`                              |
