
## 1. What is Express? (Basics)

**Definition**
Express is a fast, unopinionated, and minimalist web framework for Node.js. It helps you:

* Build web servers and APIs
* Handle routes and HTTP requests easily
* Manage middleware

**Why use it**
Without Express, creating a server in Node.js involves more lines of code and manual handling.

Example using Node.js only:

```js
const http = require('http');

http.createServer((req, res) => {
  // handle URL, headers, response logic manually
}).listen(3000);
```

With Express:

```js
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello World');
});

app.listen(3000);
```

---

## 2. Advantages of Express

* Minimal and fast: You get just what you need without extra bulk
* Middleware support: Easily add custom functions to process requests (such as authentication, logging)
* Routing system: Clean handling of URLs using simple methods like app.get or app.post
* Easy integration: Works well with databases, templating engines, etc.
* Large ecosystem: Many npm packages support and extend Express
* Flexible: You can build APIs, websites, microservices, or full-stack apps

---

## 3. Simplified Routing

**What is Routing**
Routing is the process of matching an incoming URL and HTTP method to a function that will handle the request.

**Routing format in Express**

```js
app.METHOD(PATH, HANDLER);
```

Explanation:

* app is the Express app object
* METHOD is an HTTP method like get, post, etc.
* PATH is the route path, like '/' or '/about'
* HANDLER is the function that runs when the route is matched

**Example**

```js
app.get('/', (req, res) => {
  res.send('Homepage');
});

app.post('/submit', (req, res) => {
  res.send('Form Submitted');
});
```

---

## 4. Route Handlers

**What is a Route Handler**
A route handler is a function that runs when a specific route and method are matched.

**Syntax**

```js
app.get('/about', (req, res) => {
  res.send('About Page');
});
```

**Handler function structure**

```js
(req, res) => {
  // req is the request object
  // res is the response object
}
```

**Multiple Handlers Example**

```js
app.get('/example', 
  (req, res, next) => {
    console.log('First handler');
    next(); // passes control to the next handler
  }, 
  (req, res) => {
    res.send('Second handler');
  }
);
```

---

## 5. Route Object Methods

Express provides different methods based on the type of HTTP request.

Common route methods:

* app.get(path, handler) handles GET requests
* app.post(path, handler) handles POST requests
* app.put(path, handler) handles PUT requests
* app.delete(path, handler) handles DELETE requests
* app.all(path, handler) handles all types of HTTP methods
* app.use(middleware) applies middleware to all routes

**Examples**

```js
app.get('/user', (req, res) => {
  res.send('GET User');
});

app.post('/user', (req, res) => {
  res.send('POST User');
});

app.put('/user', (req, res) => {
  res.send('PUT User');
});

app.delete('/user', (req, res) => {
  res.send('DELETE User');
});
```

**app.all() Example**

```js
app.all('/any', (req, res) => {
  res.send('This handles all HTTP methods');
});
```

---

## Summary

When someone makes a request to your Express app:

* Express checks the URL and the HTTP method
* It matches the correct route
* It runs the handler function for that route
* The handler sends back a response

---