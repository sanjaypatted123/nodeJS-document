
PostgreSQL is an advanced relational database system.
PostgreSQL supports both relational (SQL) and non-relational (JSON) queries.
PostgreSQL is free and open-source.

PostgreSQL Introduction
PostgreSQL is an free open-source database system that supports both relational (SQL) and non-relational (JSON) queries.
PostgreSQL is a back-end database for dynamic websites and web applications.
PostgreSQL supports the most important programming languages:
* Python
* Java
* C/C++
* C#
* Node.js
* Go
* Ruby
* Perl
* Tcl
PostgreSQL supports basically all features that other database management systems support.



Why Choose PostgreSQL?
Choose PostgreSQL if you want:

A free, reliable, and powerful SQL database.

Strong support for data integrity, transactions, and complex queries.

Advanced features like custom data types, full-text search, JSON support.

A database that can scale from small apps to large enterprise systems.


SQL stands for Structured Query Language. It is used to:

Create and manage databases and tables

Insert, read, update, and delete data (often called CRUD operations)

Query and filter data using specific conditions


Sure! Here's a clear and structured guide to **basic SQL syntax** ‚Äì ideal for beginners working with databases like **PostgreSQL**, **MySQL**, or **SQLite**.

---

## ‚úÖ What is SQL?

**SQL** stands for **Structured Query Language**. It is used to:

* **Create** and **manage databases and tables**
* **Insert**, **read**, **update**, and **delete** data (often called CRUD operations)
* **Query** and **filter** data using specific conditions

---

## üìò 1. **Basic SQL Statements**

### üîπ CREATE TABLE

Used to create a new table.

```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  age INT,
  email VARCHAR(100)
);
```

| Keyword       | Meaning                               |
| ------------- | ------------------------------------- |
| `SERIAL`      | Auto-incrementing number (PostgreSQL) |
| `PRIMARY KEY` | Uniquely identifies each row          |
| `VARCHAR(n)`  | Text up to `n` characters             |
| `INT`         | Integer number                        |

---

### üîπ INSERT INTO

Used to add data into a table.

```sql
INSERT INTO users (name, age, email)
VALUES ('Alice', 25, 'alice@example.com');
```

---

### üîπ SELECT

Used to **read or retrieve** data.

```sql
SELECT * FROM users;
```

* `*` means all columns.
* You can specify columns:

```sql
SELECT name, email FROM users;
```

You can filter data using **WHERE**:

```sql
SELECT * FROM users WHERE age > 21;
```

---

### üîπ UPDATE

Used to **modify existing records**.

```sql
UPDATE users
SET age = 30
WHERE name = 'Alice';
```

---

### üîπ DELETE

Used to **remove data** from a table.

```sql
DELETE FROM users WHERE age < 18;
```

---

## üìò 2. **Filtering and Sorting**

### üîπ WHERE

Filter rows:

```sql
SELECT * FROM users WHERE age >= 18;
```

### üîπ ORDER BY

Sort results:

```sql
SELECT * FROM users ORDER BY age DESC;
```

* `ASC` = ascending (default)
* `DESC` = descending

### üîπ LIMIT

Limit the number of rows returned:

```sql
SELECT * FROM users LIMIT 5;
```

---

## üìò 3. **Aggregate Functions**

Used for calculations on groups of rows.

| Function  | Description    |
| --------- | -------------- |
| `COUNT()` | Count rows     |
| `SUM()`   | Add values     |
| `AVG()`   | Average value  |
| `MAX()`   | Largest value  |
| `MIN()`   | Smallest value |

Example:

```sql
SELECT AVG(age) FROM users;
```

---

## üìò 4. **GROUP BY**

Used with aggregate functions to group results.

```sql
SELECT age, COUNT(*) FROM users
GROUP BY age;
```

---

## üìò 5. **Joins** (Basic)

Used to combine rows from two or more tables based on a related column.

Example:

```sql
SELECT orders.id, users.name
FROM orders
JOIN users ON orders.user_id = users.id;
```

---

## üìù Summary Table

| SQL Keyword    | Purpose          |
| -------------- | ---------------- |
| `CREATE TABLE` | Create new table |
| `INSERT INTO`  | Add data         |
| `SELECT`       | Read data        |
| `WHERE`        | Filter rows      |
| `UPDATE`       | Modify data      |
| `DELETE`       | Remove data      |
| `ORDER BY`     | Sort data        |
| `LIMIT`        | Limit results    |
| `GROUP BY`     | Group rows       |
| `JOIN`         | Combine tables   |

---




