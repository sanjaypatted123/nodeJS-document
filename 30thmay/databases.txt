What Is a Database?
A database is an organized collection of data that can be easily accessed, managed, and updated. It allows applications to store, retrieve, modify, and delete data efficiently.

üîç Types of Databases
There are many types, but the two most common are:
1. Relational Databases (SQL)
* Structured data in tables (rows and columns).
* Use Structured Query Language (SQL) to query data.
* Examples: MySQL, PostgreSQL, SQLite, Microsoft SQL Server.
* Good for structured data and complex queries.
2. Non-Relational Databases (NoSQL)
* Flexible schema (no fixed table structure).
* Designed for unstructured or semi-structured data.
* Examples: MongoDB, Firebase, Cassandra, Redis.
* Great for scalability and flexible data models.

üß† Basic Concepts
1. Table (in SQL) / Collection (in NoSQL)
* Where data is stored.
* Table = SQL; Collection = MongoDB
2. Row / Document
* A single entry in a table or collection.
* Row = SQL; Document = MongoDB
3. Column / Field
* A specific piece of data (like a name, age, etc.)
4. Primary Key
* A unique identifier for each row/document (like id)



1. Relational (SQL) Database
‚úÖ Strengths:
* Data integrity with strong consistency (ACID).
* Complex queries and JOINs.
* Well-suited for applications requiring relationships (e.g., e-commerce, banking).
* Mature ecosystem, widely adopted.
‚ùå Weaknesses:
* Schema changes can be difficult.
* Can be less performant for unstructured or rapidly changing data.
* Not ideal for large-scale distributed systems (though PostgreSQL and others have improved here).

2. Non-Relational (NoSQL) Database
‚úÖ Strengths:
* High scalability and performance.
* Flexible schema: suitable for agile development and fast iterations.
* Great for hierarchical or nested data (like JSON).
* Often better for big data and real-time applications.
‚ùå Weaknesses:
* Weaker support for relationships.
* Data duplication (denormalization) is common.
* Inconsistent support for transactions (though MongoDB now supports multi-document ACID).


When to Choose What?
Use Relational (SQL) When:
* Data has clear structure and relationships.
* You need complex queries and analytics.
* You need data consistency (banking, inventory, accounting).
* You need to enforce constraints (e.g., required fields, foreign keys).

 Use Non-Relational (NoSQL) When:
* You need fast, flexible development.
* Data is semi-structured or unstructured (like logs, JSON).
* You need to store large volumes of data (e.g., social media posts).
* You want to scale horizontally (add more servers easily).
