Node.js / JavaScript Time Handling:

JavaScript uses the Date object.

A. Create a Date

const now = new Date(); // Local time
const utcNow = new Date().toISOString(); // UTC in ISO 8601 format
B. Convert to UTC

const date = new Date();
console.log(date.toUTCString()); // e.g., "Sat, 07 Jun 2025 10:00:00 GMT"
C. Convert to Local

console.log(date.toLocaleString()); // Local string based on user system


-------------------------------------------------------------------------------



Here is a **complete, beginner-friendly yet deep explanation** of **time types in PostgreSQL**, and the differences between **Universal Time (UTC)** and **local time**, and how to **handle them correctly in databases and backend development** (especially for Node.js and PostgreSQL use cases):

---

## üïí TIME TYPES IN POSTGRESQL

PostgreSQL supports several **time-related data types**, each with different use-cases.

### 1. `TIME` (or `TIME WITHOUT TIME ZONE`)

* ‚úÖ Stores **only time**, not date.
* ‚ùå Does **not store time zone information**.
* üïó Example: `'14:30:00'` (2:30 PM)
* üìå Use case: Shift start time, store open/close time.

### 2. `TIME WITH TIME ZONE` (aka `timetz`)

* ‚úÖ Stores time **with a time zone offset**.
* üïó Example: `'14:30:00+05:30'`
* üîç Rarely used because time zones for just times without date are confusing and not often needed.

### 3. `DATE`

* ‚úÖ Stores only the date: year, month, day.
* ‚ùå No time or time zone.
* üìÜ Example: `'2025-06-07'`

### 4. `TIMESTAMP WITHOUT TIME ZONE`

* ‚úÖ Stores both **date and time**, like `'2025-06-07 14:30:00'`.
* ‚ùå Does **not include time zone info**.
* üîÅ Often confused with time zone-aware versions.

### 5. `TIMESTAMP WITH TIME ZONE` (aka `timestamptz`)

* ‚úÖ Stores date + time + **time zone info**.
* üïì Internally, it always stores **in UTC**, but **converts** it to/from local time depending on client settings.
* üîê Preferred for apps dealing with multiple time zones.

---

## üåç UNIVERSAL TIME (UTC) VS LOCAL TIME

### üåê UTC (Coordinated Universal Time)

* The **global standard**.
* Not affected by time zones or Daylight Saving Time.
* `2025-06-07 14:30:00 UTC` is always the same, anywhere in the world.

### üè† Local Time

* Depends on user's location (e.g., India = UTC+5:30).
* Affected by **Daylight Saving Time (DST)** in some countries.
* Varies from person to person or system to system.

---

## ‚úÖ BEST PRACTICES: STORE UTC, DISPLAY LOCAL

### Why Store in UTC?

* ‚úÖ No confusion across users in different time zones.
* ‚úÖ No DST-related bugs.
* ‚úÖ Consistent and safe.

### When to Convert to Local?

* üì± Convert to user‚Äôs local time only **when displaying on frontend or sending emails**.
* üõ† Tools like JavaScript (browser) or backend code (Node.js) can convert easily.

---

## üß™ HANDLING TIME ZONES IN POSTGRESQL

### Setting Default Timezone in PostgreSQL

```sql
SHOW timezone;  -- Check current setting
SET timezone = 'UTC';  -- For session
ALTER DATABASE yourdb SET timezone TO 'UTC';  -- Persist for db
```

### Inserting Timestamps

```sql
-- This stores time in UTC automatically if column is timestamptz
INSERT INTO events (event_time) VALUES (CURRENT_TIMESTAMP);
```

### Casting Between Types

```sql
-- Convert TIMESTAMP WITHOUT TZ to WITH TZ
SELECT timestamp '2025-06-07 14:30:00' AT TIME ZONE 'Asia/Kolkata';
-- Convert back
SELECT timestamptz '2025-06-07 14:30:00+05:30' AT TIME ZONE 'UTC';
```

---

## ‚öôÔ∏è HANDLING TIME IN NODE.JS

### 1. Use `Date` object

```js
const now = new Date();
console.log(now.toISOString());  // UTC time
console.log(now.toString());     // Local system time
```

### 2. Use `moment-timezone` or `luxon` (recommended)

```bash
npm install moment-timezone
```

```js
const moment = require("moment-timezone");

// Convert UTC to Local
const utcTime = "2025-06-07T09:00:00Z";
const indiaTime = moment.utc(utcTime).tz("Asia/Kolkata").format();
console.log(indiaTime); // 2025-06-07T14:30:00+05:30
```

### 3. Use `pg` Node.js client with UTC handling

```js
const { Pool } = require('pg');
const pool = new Pool({
  connectionString: 'postgresql://user:pass@localhost/db',
  // Ensure timestamps are returned in UTC
  types: {
    getTypeParser: () => val => new Date(val + 'Z')
  }
});
```

---

## üí° COMMON SCENARIOS

### üîÅ Case 1: User sets an appointment

1. User in India selects `7 PM IST`
2. Frontend converts it to UTC ‚Üí `13:30 UTC`
3. Send to server and store in `timestamptz`
4. When showing to user, convert back to `Asia/Kolkata`

### üì§ Case 2: Cron job sends reminders

* Job runs in UTC
* Converts stored UTC timestamp to user's time zone using their preference

---

## üß± TABLE DESIGN TIP

Always store time in UTC using `TIMESTAMP WITH TIME ZONE (timestamptz)`

```sql
CREATE TABLE appointments (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now()
);
```

---

## üõë COMMON MISTAKES

| Mistake                                              | Why it's bad               |
| ---------------------------------------------------- | -------------------------- |
| Using `timestamp without time zone` for global apps  | Time zone confusion        |
| Storing local time in DB                             | DST and user region issues |
| Not converting back to user‚Äôs local time in frontend | Wrong display              |
| Not documenting time zone handling                   | Onboarding pain later      |

---

## ‚úÖ FINAL SUMMARY

| Topic                         | What to Do                         |
| ----------------------------- | ---------------------------------- |
| Store in UTC                  | ‚úÖ Always                           |
| Use `timestamptz`             | ‚úÖ Recommended                      |
| Set DB time zone to UTC       | ‚úÖ `ALTER DATABASE ...`             |
| Convert to local on frontend  | ‚úÖ Use `Intl`, `moment`, or `luxon` |
| Never trust system local time | ‚ùå Avoid unless for UI only         |

---

